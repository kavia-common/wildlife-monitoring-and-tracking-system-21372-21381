{"is_source_file": true, "format": "Python", "description": "This is a Python source file for a FastAPI backend module that provides API endpoints to seed and verify sample data in a wildlife tracking system. It includes route handlers for inserting mock data into MongoDB collections and functions to verify the inserted data.", "external_files": ["src/db/connection", "src/db/models"], "external_methods": ["get_collection", "ensure_database"], "published": ["seed_sample_data", "verify_sample_data", "seed_and_verify"], "classes": [{"name": "SeedResult", "description": "Pydantic model representing the result of the seed operation, including document IDs for each collection and telemetry point IDs."}, {"name": "VerifyResult", "description": "Pydantic model representing verification results, including counts of documents in each collection and latest telemetry data."}], "methods": [{"name": "SeedResult seed_sample_data()", "description": "API endpoint that seeds the database with sample wildlife tracking data including user, animal, device, geofence, telemetry points, alert, and sighting.", "scope": "", "scopeKind": ""}, {"name": "VerifyResult verify_sample_data()", "description": "API endpoint that verifies the presence and queryability of seeded data.", "scope": "", "scopeKind": ""}, {"name": "Dict[str,Any] seed_and_verify()", "description": "Utility function to seed the database and immediately verify data integrity, returning combined results.", "scope": "", "scopeKind": ""}, {"name": "dict _geo_point(lon: float, lat: float)", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "dict _geo_polygon(coords: List[List[List[float]]])", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "str _insert_one(collection_name: str, doc: Dict[str, Any])", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "str _upsert_one(collection_name: str, query: Dict[str, Any], doc: Dict[str, Any])", "scope": "", "scopeKind": "", "description": "unavailable"}], "calls": ["get_collection", "ensure_database", "_upsert_one", "_insert_one"], "search-terms": ["sample_data", "seed", "verify", "wildlife_tracking", "geofence", "telemetry", "sighting", "APIRouter", "async def", "MongoDB"], "state": 2, "file_id": 9, "knowledge_revision": 28, "git_revision": "bf617ee7e03425b4a9e4039d538d91073d2feeb7", "revision_history": [{"23": ""}, {"28": "bf617ee7e03425b4a9e4039d538d91073d2feeb7"}], "ctags": [{"_type": "tag", "name": "SeedResult", "path": "/home/kavia/workspace/code-generation/wildlife-monitoring-and-tracking-system-21372-21381/wildlife_tracking_backend/src/api/sample_data.py", "pattern": "/^class SeedResult(BaseModel):$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "VerifyResult", "path": "/home/kavia/workspace/code-generation/wildlife-monitoring-and-tracking-system-21372-21381/wildlife_tracking_backend/src/api/sample_data.py", "pattern": "/^class VerifyResult(BaseModel):$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "_geo_point", "path": "/home/kavia/workspace/code-generation/wildlife-monitoring-and-tracking-system-21372-21381/wildlife_tracking_backend/src/api/sample_data.py", "pattern": "/^def _geo_point(lon: float, lat: float) -> dict:$/", "language": "Python", "typeref": "typename:dict", "kind": "function", "signature": "(lon: float, lat: float)"}, {"_type": "tag", "name": "_geo_polygon", "path": "/home/kavia/workspace/code-generation/wildlife-monitoring-and-tracking-system-21372-21381/wildlife_tracking_backend/src/api/sample_data.py", "pattern": "/^def _geo_polygon(coords: List[List[List[float]]]) -> dict:$/", "language": "Python", "typeref": "typename:dict", "kind": "function", "signature": "(coords: List[List[List[float]]])"}, {"_type": "tag", "name": "_insert_one", "path": "/home/kavia/workspace/code-generation/wildlife-monitoring-and-tracking-system-21372-21381/wildlife_tracking_backend/src/api/sample_data.py", "pattern": "/^async def _insert_one(collection_name: str, doc: Dict[str, Any]) -> str:$/", "language": "Python", "typeref": "typename:str", "kind": "function", "signature": "(collection_name: str, doc: Dict[str, Any])"}, {"_type": "tag", "name": "_upsert_one", "path": "/home/kavia/workspace/code-generation/wildlife-monitoring-and-tracking-system-21372-21381/wildlife_tracking_backend/src/api/sample_data.py", "pattern": "/^async def _upsert_one(collection_name: str, query: Dict[str, Any], doc: Dict[str, Any]) -> str:$/", "language": "Python", "typeref": "typename:str", "kind": "function", "signature": "(collection_name: str, query: Dict[str, Any], doc: Dict[str, Any])"}, {"_type": "tag", "name": "counts", "path": "/home/kavia/workspace/code-generation/wildlife-monitoring-and-tracking-system-21372-21381/wildlife_tracking_backend/src/api/sample_data.py", "pattern": "/^    counts: Dict[str, int] = Field(..., description=\"Document counts for each collection\")$/", "language": "Python", "typeref": "typename:Dict[str, int]", "kind": "variable", "scope": "VerifyResult", "scopeKind": "class"}, {"_type": "tag", "name": "errors", "path": "/home/kavia/workspace/code-generation/wildlife-monitoring-and-tracking-system-21372-21381/wildlife_tracking_backend/src/api/sample_data.py", "pattern": "/^    errors: Optional[List[str]] = Field(default=None, description=\"Any error messages encountere/", "language": "Python", "typeref": "typename:Optional[List[str]]", "kind": "variable", "scope": "VerifyResult", "scopeKind": "class"}, {"_type": "tag", "name": "latest_telemetry", "path": "/home/kavia/workspace/code-generation/wildlife-monitoring-and-tracking-system-21372-21381/wildlife_tracking_backend/src/api/sample_data.py", "pattern": "/^    latest_telemetry: Optional[Dict[str, Any]] = Field(default=None, description=\"Most recent te/", "language": "Python", "typeref": "typename:Optional[Dict[str, Any]]", "kind": "variable", "scope": "VerifyResult", "scopeKind": "class"}, {"_type": "tag", "name": "logger", "path": "/home/kavia/workspace/code-generation/wildlife-monitoring-and-tracking-system-21372-21381/wildlife_tracking_backend/src/api/sample_data.py", "pattern": "/^logger = logging.getLogger(\"sample_data\")$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "ok", "path": "/home/kavia/workspace/code-generation/wildlife-monitoring-and-tracking-system-21372-21381/wildlife_tracking_backend/src/api/sample_data.py", "pattern": "/^    ok: bool = Field(..., description=\"Overall verification status\")$/", "language": "Python", "typeref": "typename:bool", "kind": "variable", "scope": "VerifyResult", "scopeKind": "class"}, {"_type": "tag", "name": "router", "path": "/home/kavia/workspace/code-generation/wildlife-monitoring-and-tracking-system-21372-21381/wildlife_tracking_backend/src/api/sample_data.py", "pattern": "/^router = APIRouter($/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "seed_and_verify", "path": "/home/kavia/workspace/code-generation/wildlife-monitoring-and-tracking-system-21372-21381/wildlife_tracking_backend/src/api/sample_data.py", "pattern": "/^async def seed_and_verify() -> Dict[str, Any]:$/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "seed_sample_data", "path": "/home/kavia/workspace/code-generation/wildlife-monitoring-and-tracking-system-21372-21381/wildlife_tracking_backend/src/api/sample_data.py", "pattern": "/^async def seed_sample_data() -> SeedResult:$/", "language": "Python", "typeref": "typename:SeedResult", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "verify_sample_data", "path": "/home/kavia/workspace/code-generation/wildlife-monitoring-and-tracking-system-21372-21381/wildlife_tracking_backend/src/api/sample_data.py", "pattern": "/^async def verify_sample_data() -> VerifyResult:$/", "language": "Python", "typeref": "typename:VerifyResult", "kind": "function", "signature": "()"}], "hash": "eabde5149eb1ea5b37d5f95698f1481c", "format-version": 4, "code-base-name": "wildlife_tracking_backend", "filename": "wildlife_tracking_backend/src/api/sample_data.py", "fields": [{"name": "Dict[str, int] counts", "scope": "VerifyResult", "scopeKind": "class", "description": "unavailable"}, {"name": "Optional[List[str]] errors", "scope": "VerifyResult", "scopeKind": "class", "description": "unavailable"}, {"name": "Optional[Dict[str, Any]] latest_telemetry", "scope": "VerifyResult", "scopeKind": "class", "description": "unavailable"}, {"name": "logger = logging.getLogger(\"sample_data\")", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "bool ok", "scope": "VerifyResult", "scopeKind": "class", "description": "unavailable"}, {"name": "router = APIRouter(", "scope": "", "scopeKind": "", "description": "unavailable"}]}